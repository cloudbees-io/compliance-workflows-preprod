apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name:  binary_scan

permissions:
  id-token: read

jobs:
  scan:
    steps:
      - name: Initiate execution plan
        uses: cloudbees-io/asset-chain-utils-preprod/start-chain@v1
        id: plan

      - name: Login to AWS
        uses: cloudbees-io/configure-aws-credentials@v1
        id: aws-login
        continue-on-error: true
        with:
          aws-region: us-east-1
          role-to-assume: ${{ vars.oidc_staging_iam_role }}
          role-duration-seconds: "3600"

      - name: Configure container registry for Staging ECR
        continue-on-error: true
        uses: cloudbees-io/configure-ecr-credentials@v1

      - id: cranepull
        continue-on-error: true
        name: crane pull
        uses: docker://gcr.io/go-containerregistry/crane:debug
        run: |
          set -uo pipefail
          
          if [ ! -e resolved-image.file ]; then
            echo '020229604682.dkr.ecr.us-east-1.amazonaws.com/services/asset-service:0.0.6170' > resolved-image.file
          fi

          set +e
          
          image_with_digest=
          while IFS= read -r line; do
            echo "Getting image digest of source image ${line}"
            image_with_digest=$(crane digest ${line} --full-ref --platform all)
          
            if [ $? -ne 0 ]; then
              echo "Failed get image digest: $line"
              image_with_digest=
              continue
            fi
          
            echo "Found source image to pull: ${image_with_digest}"
            crane pull ${image_with_digest} image.tar.gz
            ls -alt
          
            if [ $? -ne 0 ]; then
              echo "Failed to pull image: $line"
              image_with_digest=
              continue
            fi
            break
          done < "resolved-image.file"
          
          set -e        

      - name: Workflow Artifact Inventory
        if: ${{ steps.plan.outputs.wfartifact-inventory == 'true' }}
        env:
          INPUT_CLOUDBEES_API_URL: ${{ cloudbees.api.url }}
          INPUT_WF_ARTIFACT_TOKEN: ${{ steps.plan.outputs.wf_artifact_token }}
          INPUT_COMPONENT_ID: ${{ steps.plan.outputs.wf_artifact_component_id }}
          EXECUTION_ROLE: "MASTER"
        uses: docker://docker.preprod.ecr/actions/assets-cbp-workflow-artifacts:latest
        run: /app/plugin-cbp-workflow-artifacts -mode single

      - name: Workflow Artifact Metadata
        if: ${{ steps.plan.outputs.wfartifact-decorator == 'true' }}
        env:
          INPUT_CLOUDBEES_API_URL: ${{ cloudbees.api.url }}
          INPUT_WF_ARTIFACT_TOKEN: ${{ steps.plan.outputs.wf_artifact_token }}
          INPUT_COMPONENT_ID: ${{ steps.plan.outputs.wf_artifact_component_id }}
          EXECUTION_ROLE: "DECORATOR"
        uses: docker://docker.preprod.ecr/actions/assets-cbp-workflow-artifacts:latest
        run: /app/plugin-cbp-workflow-artifacts -mode single
        #Note: Please do not revert back the tag to latest, hot fix branch for the demo
      - name: Trivy Scanner
        if: ${{ steps.plan.outputs.trivy == 'true' }}
        uses: docker://docker.preprod.ecr/actions/assets-trivy-scanner:latest
        env:
          RUN_ID: ${{ cloudbees.run_id }}
          JOB_ID: ${{ job.id }}
          STEP_ID: ${{ step.internal.id }}
        continue-on-error: true
        run: /app/plugin-trivy-scanner -mode single

      - name: FindSecBugs Scanner
        if: ${{ steps.plan.outputs.findsecbugs == 'true' }}
        uses: docker://docker.preprod.ecr/actions/assets-findsecbugs-scanner:latest
        env:
          RUN_ID: ${{ cloudbees.run_id }}
          JOB_ID: ${{ job.id }}
          STEP_ID: ${{ step.internal.id }}
        continue-on-error: true
        run: /app/plugin-findsecbugs -mode single

      - name: Syft SBOM analyser
        if: ${{ steps.plan.outputs.syft == 'true' }}
        uses: docker://docker.preprod.ecr/actions/assets-syft-sbom:latest
        env:
          RUN_ID: ${{ cloudbees.run_id }}
          JOB_ID: ${{ job.id }}
          STEP_ID: ${{ step.internal.id }}
        continue-on-error: true
        run: /app/plugin-syftbom-analyser -mode single
      #Note: Please do not revert back the tag to latest, hot fix branch for the demo

      - name: Grype Scanner
        if: ${{ steps.plan.outputs.grype == 'true' }}
        uses: docker://docker.preprod.ecr/actions/assets-grype-scanner:latest
        env:
          RUN_ID: ${{ cloudbees.run_id }}
          JOB_ID: ${{ job.id }}
          STEP_ID: ${{ step.internal.id }}
        continue-on-error: true
        run: /app/plugin-grype-scanner -mode single

      - name: Complete execution plan
        uses: cloudbees-io/asset-chain-utils-preprod/end-chain@v1
        id: process-outputs